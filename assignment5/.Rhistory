raw_data
install.packages("caret")
raw_data <- read.csv(file = "seaflow_21min.csv", header = TRUE, sep = ",");
library(caret);
setwd("~/Documents/github/coursera/data_science/datasci_course_materials/assignment5")
raw_data <- read.csv(file = "seaflow_21min.csv", header = TRUE, sep = ",");
library(caret);
set.seed(1234);
trainIndex <- createDataPartition(raw_data$pop, p = .5,
list = FALSE,
times = 1);
trainPart <- raw_data[trainIndex,];
testPart <- raw_data[-trainIndex,];
summary(trainPart)
gplot(raw_data$pe, raw_data$chl_small)
library(ggplot2)
gplot(raw_data$pe, raw_data$chl_small)
qplot(raw_data$pe, raw_data$chl_small)
qplot(raw_data$pe, raw_data$chl_small, color = pop)
qplot(raw_data$pe, raw_data$chl_small, color = raw_data$pop)
qplot( raw_data$chl_small, raw_data$pe, color = raw_data$pop)
library(rpart)
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol
model <- rpart(fol, method="class", data = trainPart)
fol <- formula(fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol
model <- rpart(fol, method="class", data = trainPart);
print(model)
predicted_label <- predict(model, testPart)
predicted_label
summary(predicted_label)
predicted_label <- predict(model, testPart, type = "class")
summary(predicted_label)
predicted_label == testPart$pop
sum(predicted_label == testPart$pop)
length(testPart)
length(testPart)
size(testPart)
dim(testPart)
dim(testPart,1)
dim(testPart)[1]
dim(testPart)[2]
accuracy = sum(predicted_label == testPart$pop)/dim(testPart)[1]
accuracy
library(randomforest)
model <- randomForest(fol, data=trainPart)
install.packages("randomForest")
library(randomForest)
model <- randomForest(fol, data=trainPart)
predicted_forest = predict(model, testPart, type = "class");
accuracy_forest = sum(predicted_forest == testPart$pop)dim(testPart)[1];
predicted_forest
sum(predicted_forest == testPart$pop)/dim(testPart)[1];
print(model)
importance(model)
library(e1071)
model3 <- svm(fol, data=trainPart);
print(model3)
predicted_svm = predict(model, testPart, type = "class");
accuracy_svm = sum(predicted_svm == testPart$pop)/dim(testPart)[1];
accuracy_svm
table(pred = predicted_svm, true = testingdata$pop)
table(pred = predicted_svm, true = testPart$pop)
table(pred = predicted_forest, true = testPart$pop)
table(pred = predicted_label, true = testPart$pop)
qplot( raw_data$fsc_small, raw_data$pe, color = raw_data$pop);
qplot( raw_data$fsc_perp, raw_data$pe, color = raw_data$pop);
qplot( raw_data$fsc_big, raw_data$pe, color = raw_data$pop);
qplot( raw_data$fsc_perp, raw_data$pe, color = raw_data$pop);
qplot( raw_data$fsc_big, raw_data$pe, color = raw_data$pop);
qplot( raw_data$chl_small, raw_data$pe, color = raw_data$pop);
qplot( raw_data$chl_big, raw_data$pe, color = raw_data$pop);
summary(raw_data)
raw_data[which(raw_data$file_id != 208),]
clean_data = raw_data[which(raw_data$file_id != 208),]
qplot( raw_data$fsc_big, raw_data$pe, color = raw_data$pop);
qplot( clean_data$fsc_big, clean_data$pe, color = raw_data$pop);
qplot( clean_data$fsc_big, clean_data$pe, color = clean_data$pop);
qplot( raw_data$time, raw_data$chl_big);
qplot( clean_data$time, clean_data$chl_big);
qplot( raw_data$time, raw_data$chl_big);
qplot( raw_data$time, raw_data$fsc_big);
qplot( raw_data$time, raw_data$fsc_perp);
qplot( raw_data$time, raw_data$fsc_small);
qplot( raw_data$time, raw_data$fsc_small, color = raw_data$pop);
qplot( raw_data$time, raw_data$chl_big, color = raw_data$pop);
qplot( clean_data$time, clean_data$chl_big, color = clean_data$pop);
set.seed(5768);
trainIndex <- createDataPartition(clean_data$pop, p = .5,
list = FALSE,
times = 1);
trainPart <- raw_data[trainIndex,];
testPart <- raw_data[-trainIndex,];
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data = trainPart);
predicted_label <- predict(model, testPart, type = "class");
accuracy_tree = sum(predicted_label == testPart$pop)/dim(testPart)[1];
accuracy_tree
print(model)
model3 <- svm(fol, data=trainPart);
predicted_svm = predict(model, testPart, type = "class");
accuracy_svm = sum(predicted_svm == testPart$pop)/dim(testPart)[1];
accuracy_svm
model <- randomForest(fol, data=trainPart);
predicted_forest = predict(model, testPart, type = "class");
accuracy_forest = sum(predicted_forest == testPart$pop)/dim(testPart)[1];
accuracy_forest
0.9212905-accuracy_svm
table(model_svm)
table(model3)
table(pred = predicted_svm, true = testPart$pop)
table(pred = predicted_label, true = testPart$pop)
table(pred = predicted_label, true = testPart$pop)
sum(predicted_label != predicted_svm)
sum(predicted_svm == testPart$pop)/dim(testPart)[1];
sum(predicted_label == testPart$pop)/dim(testPart)[1];
qplot( clean_data$time, clean_data$chl_big, color = raw_data$pop);
qplot( clean_data$time, clean_data$chl_big, color = clean_data$pop);
set.seed(1457);
trainIndex <- createDataPartition(clean_data$pop, p = .5,
list = FALSE,
times = 1);
trainPart <- clean_data[trainIndex,];
testPart <- clean_data[-trainIndex,];
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model3 <- svm(fol, data=trainPart);
predicted_svm = predict(model, testPart, type = "class");
accuracy_svm = sum(predicted_svm == testPart$pop)/dim(testPart)[1];
accuracy_svm
0.9725251-0.9212905
model1 <- rpart(fol, method="class", data = trainPart);
predicted_label <- predict(model1, testPart, type = "class");
accuracy_tree = sum(predicted_label == testPart$pop)/dim(testPart)[1];
accuracy_tree
